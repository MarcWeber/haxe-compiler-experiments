From: Marc Weber <marco-oweber@gmx.de>
Subject: [PATCH] t/short-lambda2

patch implementing short lambdas with named arguments which are declared when
being used
=============================================================================

WARNING: Take this patch with care - I don't know yet what I'm doing 

This idea started as "I want what Scala has: anonymous parameters".
In Scala _ + _ is the same as function(a,b){ return a + b; }
The issue is: You can't encode { return b / a; }.

So I want to add indexes. There is still a flaw: You can't nest, because $1 
would be named $1 in the sub lambda as well.

Thus I want to give those anonymous arguments a name - so that they are no
longer anonymous. The behaviour can be described as

   >> First usage declares the argument <<

Simple examples (all the same)

  // old:
  list.zip2(list2, function(a,b){ return b / a; })

  // new (empty names):
  list.zip2(list2, $2 / $1);

  // new (named):
  list.zip2(list2, $2dividend / $divisor);


Nested example:

  // Note how $reply refers to the argument of the outer lambda.
  obj.send(
    $reply.send( trace($reply2.toString() + " " + $reply) )
  );

  // comparison: old HaXe syntax:
  obj.send(function(reply){
    reply.send( function(reply2){
      trace(reply2.toString()+" "+reply);
    });
  });

sometimes you have to declare a anonymous argument:

  callback( $1; trace($1) );

which is equal to
  callback( function(x){trace(x);} );

Example: callback which does not take any arguments:

callback($; trace("I was called"); ); // special var $ triggers no arguments

Thoughts about its usage
=============================================================================

keeping code readable & what if you want to refer to a argument in a nested
lambda only?

HaXe allows no ops:

  var x = 7;
  x; // no op

This can be used to fake argument declaration:

  obj.send(
    $reply;
    // $reply refers to outer lambda
    // $reply2 is an argument of the inner lambda:
    obj.send(trace($reply+$reply2);
  );

Thus before you start writing:
  obj.send(
    [ 200 lines ]
    trace($reply);
  );

put the arg first to keep code readable:
  obj.send(
    $reply;
    [ 200 lines ]
    trace($reply);
  );


I hope that this implementation is at least as readable / useful as what Scala
/ Perl offer
